package unisolicitacao.business;

// Generated 29/04/2014 16:22:41 by Hibernate Tools 3.4.0.CR1

import java.sql.Clob;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Solicitacao generated by hbm2java
 */
@Entity
@Table(name = "Solicitacao ", schema = "dbo", catalog = "Unisolicitacao")
public class Solicitacao implements java.io.Serializable {

	private Integer idSolicitacao;
	private Solicitacao solicitacao;
	private Situacao situacao;
	private Setor setorByIdSetorDestino;
	private Setor setorByIdSetorOrigem;
	private Prioridade prioridade;
	private SistemaModulo sistemaModulo;
	private Usuario usuario;
	private Clob descAssunto;
	private Clob descProblema;
	private Date dataSolicitacao;
	private Date dataDesejada;
	private Anexo anexo;
	private Set<Atendimento> atendimentos = new HashSet<Atendimento>(0);
	private Set<Conversa> conversas = new HashSet<Conversa>(0);
	private Set<Solicitacao> solicitacaos = new HashSet<Solicitacao>(0);
	private Set<Fechamento> fechamentos = new HashSet<Fechamento>(0);

	public Solicitacao() {
	}

	public Solicitacao(Integer idSolicitacao, Solicitacao solicitacao,
			Situacao situacao, Prioridade prioridade,
			SistemaModulo sistemaModulo, Usuario usuario, Clob descAssunto,
			Clob descProblema, Date dataSolicitacao) {
		this.idSolicitacao = idSolicitacao;
		this.solicitacao = solicitacao;
		this.situacao = situacao;
		this.prioridade = prioridade;
		this.sistemaModulo = sistemaModulo;
		this.usuario = usuario;
		this.descAssunto = descAssunto;
		this.descProblema = descProblema;
		this.dataSolicitacao = dataSolicitacao;
	}

	public Solicitacao(Integer idSolicitacao, Solicitacao solicitacao,
			Situacao situacao, Setor setorByIdSetorDestino,
			Setor setorByIdSetorOrigem, Prioridade prioridade,
			SistemaModulo sistemaModulo, Usuario usuario, Clob descAssunto,
			Clob descProblema, Date dataSolicitacao, Date dataDesejada,
			Anexo anexo, Set<Atendimento> atendimentos,
			Set<Conversa> conversas, Set<Solicitacao> solicitacaos,
			Set<Fechamento> fechamentos) {
		this.idSolicitacao = idSolicitacao;
		this.solicitacao = solicitacao;
		this.situacao = situacao;
		this.setorByIdSetorDestino = setorByIdSetorDestino;
		this.setorByIdSetorOrigem = setorByIdSetorOrigem;
		this.prioridade = prioridade;
		this.sistemaModulo = sistemaModulo;
		this.usuario = usuario;
		this.descAssunto = descAssunto;
		this.descProblema = descProblema;
		this.dataSolicitacao = dataSolicitacao;
		this.dataDesejada = dataDesejada;
		this.anexo = anexo;
		this.atendimentos = atendimentos;
		this.conversas = conversas;
		this.solicitacaos = solicitacaos;
		this.fechamentos = fechamentos;
	}

	@Id
	@Column(name = "IdSolicitacao", unique = true, nullable = false)
	public Integer getIdSolicitacao() {
		return this.idSolicitacao;
	}

	public void setIdSolicitacao(Integer idSolicitacao) {
		this.idSolicitacao = idSolicitacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idSolicitacaoGerada", nullable = false)
	public Solicitacao getSolicitacao() {
		return this.solicitacao;
	}

	public void setSolicitacao(Solicitacao solicitacao) {
		this.solicitacao = solicitacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdSituacao", nullable = false)
	public Situacao getSituacao() {
		return this.situacao;
	}

	public void setSituacao(Situacao situacao) {
		this.situacao = situacao;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdSetorDestino")
	public Setor getSetorByIdSetorDestino() {
		return this.setorByIdSetorDestino;
	}

	public void setSetorByIdSetorDestino(Setor setorByIdSetorDestino) {
		this.setorByIdSetorDestino = setorByIdSetorDestino;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdSetorOrigem")
	public Setor getSetorByIdSetorOrigem() {
		return this.setorByIdSetorOrigem;
	}

	public void setSetorByIdSetorOrigem(Setor setorByIdSetorOrigem) {
		this.setorByIdSetorOrigem = setorByIdSetorOrigem;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdPrioridade", nullable = false)
	public Prioridade getPrioridade() {
		return this.prioridade;
	}

	public void setPrioridade(Prioridade prioridade) {
		this.prioridade = prioridade;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdSistema", nullable = false)
	public SistemaModulo getSistemaModulo() {
		return this.sistemaModulo;
	}

	public void setSistemaModulo(SistemaModulo sistemaModulo) {
		this.sistemaModulo = sistemaModulo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdUsuario", nullable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@Column(name = "DescAssunto", nullable = false)
	public Clob getDescAssunto() {
		return this.descAssunto;
	}

	public void setDescAssunto(Clob descAssunto) {
		this.descAssunto = descAssunto;
	}

	@Column(name = "DescProblema", nullable = false)
	public Clob getDescProblema() {
		return this.descProblema;
	}

	public void setDescProblema(Clob descProblema) {
		this.descProblema = descProblema;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataSolicitacao", nullable = false, length = 23)
	public Date getDataSolicitacao() {
		return this.dataSolicitacao;
	}

	public void setDataSolicitacao(Date dataSolicitacao) {
		this.dataSolicitacao = dataSolicitacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataDesejada", length = 23)
	public Date getDataDesejada() {
		return this.dataDesejada;
	}

	public void setDataDesejada(Date dataDesejada) {
		this.dataDesejada = dataDesejada;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "solicitacao")
	public Anexo getAnexo() {
		return this.anexo;
	}

	public void setAnexo(Anexo anexo) {
		this.anexo = anexo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solicitacao")
	public Set<Atendimento> getAtendimentos() {
		return this.atendimentos;
	}

	public void setAtendimentos(Set<Atendimento> atendimentos) {
		this.atendimentos = atendimentos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solicitacao")
	public Set<Conversa> getConversas() {
		return this.conversas;
	}

	public void setConversas(Set<Conversa> conversas) {
		this.conversas = conversas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solicitacao")
	public Set<Solicitacao> getSolicitacaos() {
		return this.solicitacaos;
	}

	public void setSolicitacaos(Set<Solicitacao> solicitacaos) {
		this.solicitacaos = solicitacaos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "solicitacao")
	public Set<Fechamento> getFechamentos() {
		return this.fechamentos;
	}

	public void setFechamentos(Set<Fechamento> fechamentos) {
		this.fechamentos = fechamentos;
	}

}
