package unisolicitacao.business;

// Generated 29/04/2014 16:22:41 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Atendimento generated by hbm2java
 */
@Entity
@Table(name = "Atendimento", schema = "dbo", catalog = "Unisolicitacao")
public class Atendimento implements java.io.Serializable {

	private Integer idAtendimento;
	private Usuario usuario;
	private String descAtendimento;
	private Solicitacao solicitacao;
	private Date dataInicioAtendimento;
	private Date dataFimAtendimento;
	private Set<Encaminhamento> encaminhamentosForIdAtendimentoReceptor = new HashSet<Encaminhamento>(
			0);
	private Set<Avaliacao> avaliacaos = new HashSet<Avaliacao>(0);
	private Set<Encaminhamento> encaminhamentosForIdAtendimentoEmissor = new HashSet<Encaminhamento>(
			0);
	private Set<Conversa> conversas = new HashSet<Conversa>(0);

	public Atendimento() {
	}

	public Atendimento(Integer idAtendimento, Usuario usuario,
			Solicitacao solicitacao, Date dataInicioAtendimento) {
		this.idAtendimento = idAtendimento;
		this.usuario = usuario;
		this.solicitacao = solicitacao;
		this.dataInicioAtendimento = dataInicioAtendimento;
	}

	public Atendimento(Integer idAtendimento, Usuario usuario,
			Solicitacao solicitacao, Date dataInicioAtendimento,
			Date dataFimAtendimento,
			Set<Encaminhamento> encaminhamentosForIdAtendimentoReceptor,
			Set<Avaliacao> avaliacaos,
			Set<Encaminhamento> encaminhamentosForIdAtendimentoEmissor,
			Set<Conversa> conversas) {
		this.idAtendimento = idAtendimento;
		this.usuario = usuario;
		this.solicitacao = solicitacao;
		this.dataInicioAtendimento = dataInicioAtendimento;
		this.dataFimAtendimento = dataFimAtendimento;
		this.encaminhamentosForIdAtendimentoReceptor = encaminhamentosForIdAtendimentoReceptor;
		this.avaliacaos = avaliacaos;
		this.encaminhamentosForIdAtendimentoEmissor = encaminhamentosForIdAtendimentoEmissor;
		this.conversas = conversas;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "IdAtendimento", unique = true, nullable = false)
	public Integer getIdAtendimento() {
		return this.idAtendimento;
	}

	public void setIdAtendimento(Integer idAtendimento) {
		this.idAtendimento = idAtendimento;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdUsuario", nullable = false)
	public Usuario getUsuario() {
		return this.usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "IdSolicitacao", nullable = false)
	public Solicitacao getSolicitacao() {
		return this.solicitacao;
	}

	public void setSolicitacao(Solicitacao solicitacao) {
		this.solicitacao = solicitacao;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataInicioAtendimento", nullable = false, length = 23)
	public Date getDataInicioAtendimento() {
		return this.dataInicioAtendimento;
	}

	public void setDataInicioAtendimento(Date dataInicioAtendimento) {
		this.dataInicioAtendimento = dataInicioAtendimento;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DataFimAtendimento", length = 23)
	public Date getDataFimAtendimento() {
		return this.dataFimAtendimento;
	}

	public void setDataFimAtendimento(Date dataFimAtendimento) {
		this.dataFimAtendimento = dataFimAtendimento;
	}
	
	@Column(name = "descAtendimento", length = 255)
	public String getDescAtendimento()
	{
		return this.descAtendimento;
	}
	
	public void setDescAtendimento(String descAtendimento)
	{
		this.descAtendimento = descAtendimento;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "atendimentoByIdAtendimentoReceptor")
	public Set<Encaminhamento> getEncaminhamentosForIdAtendimentoReceptor() {
		return this.encaminhamentosForIdAtendimentoReceptor;
	}

	public void setEncaminhamentosForIdAtendimentoReceptor(
			Set<Encaminhamento> encaminhamentosForIdAtendimentoReceptor) {
		this.encaminhamentosForIdAtendimentoReceptor = encaminhamentosForIdAtendimentoReceptor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "atendimento")
	public Set<Avaliacao> getAvaliacaos() {
		return this.avaliacaos;
	}

	public void setAvaliacaos(Set<Avaliacao> avaliacaos) {
		this.avaliacaos = avaliacaos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "atendimentoByIdAtendimentoEmissor")
	public Set<Encaminhamento> getEncaminhamentosForIdAtendimentoEmissor() {
		return this.encaminhamentosForIdAtendimentoEmissor;
	}

	public void setEncaminhamentosForIdAtendimentoEmissor(
			Set<Encaminhamento> encaminhamentosForIdAtendimentoEmissor) {
		this.encaminhamentosForIdAtendimentoEmissor = encaminhamentosForIdAtendimentoEmissor;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "atendimento")
	public Set<Conversa> getConversas() {
		return this.conversas;
	}

	public void setConversas(Set<Conversa> conversas) {
		this.conversas = conversas;
	}
	

}
